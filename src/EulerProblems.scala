/**
 * Created by jeff on 5/26/15.
 */
object EulerProblems {
  def main(args: Array[String]): Unit = {

    // Problem 1
    val answerOne = sumThreesAndFives(0, 1, 1000);
    println("Answer 1: " + answerOne);

    // Problem 2
    val answerTwo = sumEvenFibonacciNumbers(0, 1, 2, 4000000);
    println("Answer 2: " + answerTwo);
  }

  /*
  Problem 1
  If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9.
  The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.
  */
  def sumThreesAndFives(carry: Int, index: Int, bound: Int): Int = {
    if (index >= bound) carry else sumThreesAndFives(if (index % 3 == 0 || index % 5 == 0) index + carry else carry, index + 1, bound);
  }

  /*
  Problem 2
  Each new term in the Fibonacci sequence is generated by adding the previous two terms.
  By starting with 1 and 2, the first 10 terms will be:
  1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
  By considering the terms in the Fibonacci sequence whose values do not exceed four million,
  find the sum of the even-valued terms.
  */
  def sumEvenFibonacciNumbers(carry: Long, previous: Long, next: Long, bound: Long): Long = {
    if (previous >= bound) carry else sumEvenFibonacciNumbers(if (previous % 2 == 0) previous + carry else carry, next, previous + next, bound);
  }
}
